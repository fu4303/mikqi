{"version":3,"sources":["webpack:///./src/templates/category.jsx","webpack:///./src/components/AuthorThumbnail/AuthorThumbnail.jsx","webpack:///./src/components/PostListing/PostListing.jsx","webpack:///./src/components/PostTags/PostTags.jsx","webpack:///./src/components/AuthorLink/AuthorLink.jsx","webpack:///./src/components/PostFormatting/PostFormatting.jsx","webpack:///./src/components/PostHeader/PostHeader.jsx","webpack:///./src/components/PostDate/PostDate.jsx","webpack:///./src/models/author-model.js"],"names":["CategoryTemplate","render","category","this","props","pageContext","postEdges","data","allMarkdownRemark","edges","authorsEdges","authors","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_5__","location","className","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","title","config","siteTitle","_components_PostListing_PostListing__WEBPACK_IMPORTED_MODULE_3__","postAuthors","React","Component","pageQuery","AuthorThumbnail","_this$props","avatar","name","react_default","src","alt","data-pin-nopin","PostListing","authorEdges","postList","map","postEdge","path","node","fields","slug","tags","frontmatter","cover","date","author","AuthorModel","getAuthor","SiteConfig","blogAuthorId","excerpt","timeToRead","post","post_class","PostFormatting","key","PostHeader","gatsby_browser_entry","to","components_AuthorThumbnail_AuthorThumbnail","image","AuthorLink","url","uid","PostTags","prefix","style","paddingLeft","paddingRight","fontSize","PostDate","tag","index","arr","gatsby__WEBPACK_IMPORTED_MODULE_3__","_","kebabCase","length","react__WEBPACK_IMPORTED_MODULE_2___default","children","dateTime","moment","Date","format","findName","authorEdgesToList","edge","hasAuthor","authorUid","authorList","Boolean","find","fallbackId"],"mappings":"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","file":"component---src-templates-category-jsx-0551e5768e0f5eb1d34a.js","sourcesContent":["import { graphql } from \"gatsby\";\nimport React from \"react\";\nimport Helmet from \"react-helmet\";\nimport PostListing from \"../components/PostListing/PostListing\";\nimport config from \"../../data/SiteConfig\";\nimport Layout from \"../components/layout\";\n\nclass CategoryTemplate extends React.Component {\n  render() {\n    const { category } = this.props.pageContext;\n    const postEdges = this.props.data.allMarkdownRemark.edges;\n    const authorsEdges = this.props.data.authors.edges;\n    return (\n      <Layout location={this.props.location}>\n        <div className=\"category-container\">\n          <Helmet\n            title={`Posts in category \"${category}\" | ${config.siteTitle}`}\n          />\n          <PostListing postEdges={postEdges} postAuthors={authorsEdges} />\n        </div>\n      </Layout>\n    );\n  }\n}\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n          }\n        }\n      }\n    }\n    # authors\n    authors: allAuthorsJson {\n      edges {\n        node {\n          uid\n          name\n          image\n          url\n          bio\n        }\n      }\n    }\n  }\n`;\n\nexport default CategoryTemplate;\n","import React from \"react\";\nimport \"./AuthorThumbnail.css\";\n\nclass AuthorThumbnail extends React.Component {\n  render() {\n    const { avatar, name } = this.props;\n    if (avatar && name) {\n      return (\n        <img\n          className=\"author-thumb\"\n          src={avatar}\n          alt={name}\n          data-pin-nopin=\"true\"\n        />\n      );\n    }\n    return null;\n  }\n}\n\nexport default AuthorThumbnail;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport AuthorThumbnail from \"../AuthorThumbnail/AuthorThumbnail\";\nimport PostTags from \"../PostTags/PostTags\";\nimport SiteConfig from \"../../../data/SiteConfig\";\nimport AuthorLink from \"../AuthorLink/AuthorLink\";\nimport PostFormatting from \"../PostFormatting/PostFormatting\";\nimport PostHeader from \"../PostHeader/PostHeader\";\nimport PostDate from \"../PostDate/PostDate\";\nimport AuthorModel from \"../../models/author-model\";\nimport \"./PostListing.css\";\n\nconst getPostList = (postEdges, authorEdges) =>\n  postEdges.map(postEdge => ({\n    path: postEdge.node.fields.slug,\n    tags: postEdge.node.frontmatter.tags,\n    cover: postEdge.node.frontmatter.cover,\n    title: postEdge.node.frontmatter.title,\n    date: postEdge.node.frontmatter.date,\n    author: AuthorModel.getAuthor(\n      authorEdges,\n      postEdge.node.frontmatter.author,\n      SiteConfig.blogAuthorId\n    ),\n    excerpt: postEdge.node.excerpt,\n    timeToRead: postEdge.node.timeToRead\n  }));\n\nclass PostListing extends React.Component {\n  render() {\n    const postList = getPostList(this.props.postEdges, this.props.postAuthors);\n\n    return (\n      <div>\n        {/* This is the post loop - each post will be output using this markup */}\n        {postList.map(post => {\n          const { title, path, excerpt, author, tags, date, timeToRead } = post;\n          const className = post.post_class ? post.post_class : \"post\";\n\n          return (\n            <PostFormatting className={className} key={title}>\n              <PostHeader>\n                <h2 className=\"post-title\">\n                  <Link to={path}>{title}</Link>\n                </h2>\n              </PostHeader>\n              <section className=\"post-excerpt\">\n                {/* TODO limit excerpt to 26 words */}\n                <p>\n                  {excerpt}\n                  {\" \"}\n                  <Link className=\"read-more\" to={path}>\n                    &raquo;\n                  </Link>\n                </p>\n              </section>\n              <footer className=\"post-meta\">\n                <AuthorThumbnail avatar={author.image} name={author.name} />\n                <AuthorLink url={`/author/${author.uid}`} name={author.name} />\n                <PostTags prefix=\" on \" tags={tags} />\n                <span style={{paddingLeft: 6, paddingRight: 6, fontSize: 13}}>â€¢</span>\n                <PostDate date={date} />\n                <span style={{paddingLeft: 6, paddingRight: 6, fontSize: 13}}>â€¢</span>\n                <span style={{fontSize: 13}}>\n                  {`${timeToRead } min read`}\n                </span>\n              </footer>\n            </PostFormatting>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nexport default PostListing;\n","import React, { Component } from \"react\";\nimport _ from \"lodash\";\nimport { Link } from \"gatsby\";\nimport \"./PostTags.css\";\n\nclass PostTags extends Component {\n  render() {\n    const { prefix, tags } = this.props;\n    if (tags) {\n      return (\n        <span>\n          {prefix}\n          {tags.map((tag, index, arr) => (\n            <span key={tag}>\n              <Link key={tag} to={`/tags/${_.kebabCase(tag)}`}>\n                {tag}\n              </Link>\n              {index !== arr.length - 1 ? \", \" : \"\"}\n            </span>\n          ))}\n        </span>\n      );\n    }\n    return null;\n  }\n}\n\nexport default PostTags;\n","import React from \"react\";\nimport { Link } from \"gatsby\";\nimport \"./AuthorLink.css\";\n\nclass AuthorLink extends React.Component {\n  render() {\n    const { name, url } = this.props;\n    if (name && url) {\n      return <Link to={url}>{name}</Link>;\n    }\n    return null;\n  }\n}\n\nexport default AuthorLink;\n","import React from \"react\";\nimport \"./PostFormatting.css\";\n\nclass PostFormatting extends React.Component {\n  render() {\n    const { children, className } = this.props;\n    return <article className={className}>{children}</article>;\n  }\n}\n\nexport default PostFormatting;\n","import React from \"react\";\nimport \"./PostHeader.css\";\n\nclass PostHeader extends React.Component {\n  render() {\n    const { children } = this.props;\n    return <header className=\"post-header\">{children}</header>;\n  }\n}\n\nexport default PostHeader;\n","import React from \"react\";\nimport moment from \"moment\";\nimport \"./PostDate.css\";\n\nclass PostDate extends React.Component {\n  render() {\n    const { date } = this.props;\n    return (\n      <time\n        className=\"post-date\"\n        dateTime={moment(new Date(date)).format(\"YYYY-MM-DD\")}\n      >\n        {moment(new Date(date)).format(\"DD MMMM YYYY\")}\n      </time>\n    );\n  }\n}\n\nexport default PostDate;\n","const findName = name => author => author.uid === name;\nconst authorEdgesToList = authorEdges => authorEdges.map(edge => edge.node);\n\nclass AuthorModel {\n  static hasAuthor(authorEdges, authorUid) {\n    const authorList = authorEdgesToList(authorEdges);\n    return Boolean(authorList.find(findName(authorUid)));\n  }\n\n  static getAuthor(authorEdges, authorUid, fallbackId) {\n    const authorList = authorEdgesToList(authorEdges);\n    if (this.hasAuthor(authorEdges, authorUid)) {\n      return authorList.find(findName(authorUid));\n    }\n    return authorList.find(findName(fallbackId));\n  }\n}\n\nexport default AuthorModel;\n"],"sourceRoot":""}